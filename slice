#!/usr/bin/env python3
from datetime import date, datetime, timedelta
import difflib
import logging
import os
import re
import string
import subprocess
import sys
import tempfile

log = logging.getLogger(__name__)


class ColorDiff:
  __CYAN = "\033[36m"
  __RED = "\033[31m"
  __GREEN = "\033[32m"
  __DEFAULT = "\033[0m"

  # prints colored diff lines to the terminal
  @classmethod
  def diff(cls, header, a, b):
    a_out = [cls.__CYAN, header]
    b_out = [cls.__CYAN, header]

    sm = difflib.SequenceMatcher(a = a, b = b, autojunk = False)
    for tag, i1, i2, j1, j2 in sm.get_opcodes():
      a_out.append(cls.__RED if tag == "replace" or tag == "delete" else cls.__DEFAULT)
      a_out.append(a[i1:i2])
      b_out.append(cls.__GREEN if tag == "replace" or tag == "insert" else cls.__DEFAULT)
      b_out.append(b[j1:j2])

    a_out.append(cls.__DEFAULT)
    b_out.append(cls.__DEFAULT)

    if len(a) > 0:
      print("".join(a_out))
    if len(b) > 0:
      print("".join(b_out))
    print()


class AbstractTodoEnv:
  def __init__(self, os_environ):
    self.__os_environ = os_environ
    self.todo_dir_path = lambda: self.__environ("TODO_DIR")
    self.todo_file_path = lambda: self.__environ("TODO_FILE")
    self.editor_path = lambda: self.__environ("EDITOR")
    self.date_on_add = lambda: self.__environ("TODOTXT_DATE_ON_ADD") == "1"
    self.default_create_date = lambda: self.today() if self.date_on_add() else None
    self.preserve_line_numbers = lambda: self.__environ("TODOTXT_PRESERVE_LINE_NUMBERS") == "1"
    self.disable_filter = lambda: self.__environ("TODOTXT_DISABLE_FILTER") == "1"
    self.slice_review_intervals = lambda: self.__environ("TODOTXT_SLICE_REVIEW_INTERVALS", default = "_:0,A:1,B:7,C:56,Z:182")

  def __environ(self, key, default = None):
    try:
      return self.__os_environ[key]
    except KeyError:
      if default is not None:
        log.warn("Environment variable %s is not defined. Falling back to default: '%s'" % (key, default))
        return default
      else:
        log.warn("Mandatory environment variable %s is not defined." % key)
        sys.exit(1)


# a thin shim between us and the real world
# try to minimize what goes in here as it will not be tested
class TodoEnv(AbstractTodoEnv):
  def __init__(self):
    AbstractTodoEnv.__init__(self, os.environ)

  def today(self):
    return date.today()

  def read_lines(self, path):
    with open(path, "r", encoding="utf-8") as f:
      return f.read().splitlines()

  def write_lines(self, path, lines):
    with open(path, "w", encoding="utf-8") as f:
      for line in lines:
        f.write(line)
        f.write("\n")

  def create_temp_dir(self):
    return tempfile.TemporaryDirectory()

  def subprocess_check_call(self, path, args):
    subprocess.check_call([path] + args)

  def print_diff(self, id, max_id_len, task_a, task_b):
    header = "%s " % str(id).zfill(max_id_len)
    log_a = task_a.line if task_a else ""
    log_b = task_b.line if task_b else ""
    ColorDiff.diff(header, log_a, log_b)


class Priority:
  __priority_re = re.compile(r"""^
    ( \( (?P<level> [A-Z_] ) \) )?
  $""", re.VERBOSE)

  @classmethod
  def parse(cls, raw):
    m = cls.__priority_re.match(raw)
    if m is None:
      raise ValueError("Cannot parse priority: %s" % raw)
    raw_level = m.group("level")
    explicit = raw_level is not None
    level = raw_level if raw_level != "_" else None
    priority = Priority(level, explicit)
    assert priority.raw == raw, "parsing should not lose information: <%s> != <%s>" % (priority.raw, raw)
    return priority

  def __init__(self, level, explicit_no_level = False):
    if level is not None and level not in string.ascii_uppercase:
      raise ValueError("Invalid level: %s" % level)
    self.level = level
    self.explicit = level is not None or explicit_no_level
    self.raw = "(" + (level or "_") + ")" if self.explicit else ""

  def normalize(self, explicit_no_level):
    return Priority(self.level, explicit_no_level) if not self.level and self.explicit != explicit_no_level else self

  def __repr__(self):
    return self.raw

  # ignore explicitness in comparison
  def __eq__(self, other):
    return other is not None and self.level.__eq__(other.level)

  def __ne__(self, other):
    return not self.__eq__(other)

  def __hash__(self):
    return self.level.__hash__()


class Tag:
  __tag_re = re.compile(r"""
    (
      (?P<prefix> [@+] )  # project/context prefix
      (?P<name> \S+ )     # name
    |
      (?P<key> \S+? ) :   # key:
      (?!//)              # don't match URLs
      (?P<value> \S+ )    # value
    )
  """, re.VERBOSE)

  @staticmethod
  def __handle_match(m):
    raw = m.group(0)
    prefix = m.group("prefix")
    name = m.group("name")
    key = m.group("key")
    value = m.group("value")
    if prefix:
      assert name, "name should be captured if prefix is captured: %s" % raw
      if prefix == "@":
        tag = ContextTag(name)
      elif prefix == "+":
        tag = ProjectTag(name)
      else:
        assert False, "unknown prefix: %s" % prefix
    else:
      assert key and value, "key and value should be captured if prefix is not: %s" % raw
      tag = KeyValueTag(key, value)
    assert tag.raw == raw, "parsing should not lose information: <%> != <%s>" % (tag.raw, raw)
    return tag

  @classmethod
  def parse(cls, raw):
    m = cls.__tag_re.match(raw)
    if m and m.group(0) == raw: # check the whole string was matched
      return cls.__handle_match(m)
    else:
      raise ValueError("Cannot parse tag: %s" % raw)

  # returns a list of Tags and non-empty strings
  @classmethod
  def tokenize(cls, raw):
    tokens = []
    pos = 0

    def handle_str(end):
      str_token = raw[pos:end]
      if len(str_token) > 0:
        tokens.append(str_token)

    for m in cls.__tag_re.finditer(raw):
      handle_str(m.start())
      tokens.append(cls.__handle_match(m))
      pos = m.end()

    handle_str(len(raw))

    return tokens

  # joins the given tokens
  # where there are two adjacent tokens with no intermediate whitespace, a space is inserted
  # where there are two adjacent tokens and both supply whitespace, the second whitespace is dropped
  # leading and trailing whitespace is removed
  @classmethod
  def join_tokens(cls, tokens):
    str_tokens = []
    preceding_space = True

    for token in tokens:
      if isinstance(token, Tag):
        start_space = False
        end_space = False
        str_token = str(token)
      else:
        assert isinstance(token, str) and len(token) > 0, "Expected non-Tag token to be a non-empty string: %s" % token
        start_space = token[0].isspace()
        end_space = token[-1].isspace()
        str_token = token.lstrip() if preceding_space else token

      if not preceding_space and not start_space:
        str_tokens.append(" ")
      str_tokens.append(str_token)

      preceding_space = end_space

    return "".join(str_tokens).rstrip()

  # sorts the tags between the "edge" and the first non-whitespace token
  # the "edge" is the start if trailing is false, else the end
  @classmethod
  def sort_edge_tags(cls, tokens, trailing):
    # split tokens into "tags at the edge", and whatever remains
    edge_tags = []
    edge_pos = -1 if trailing else 0
    rem_tokens = tokens[:]
    while len(rem_tokens) > 0:
      token = rem_tokens[edge_pos]
      if isinstance(token, Tag):
        edge_tags.append(token)
      else:
        assert isinstance(token, str) and len(token) > 0, "Expected non-Tag token to be a non-empty string: %s" % token
        if not token.isspace():
          # no longer at edge
          break
      rem_tokens.pop(edge_pos)

    edge_tags.sort(key = lambda tag: tag.sort_key())
    return rem_tokens + edge_tags if trailing else edge_tags + rem_tokens

  def sort_key(self):
    raise NotImplementedError

  def __init__(self, raw):
    self.raw = raw

  def __repr__(self):
    return self.raw

  def __eq__(self, other):
    return other is not None and self.raw.__eq__(other.raw)

  def __ne__(self, other):
    return not self.__eq__(other)

  def __hash__(self):
    return self.raw.__hash__()


class ContextTag(Tag):
  def __init__(self, name):
    Tag.__init__(self, "@" + name)
    self.key = self.raw
    self.name = name

  def sort_key(self):
    return (0, self.name, None)


class ProjectTag(Tag):
  def __init__(self, name):
    Tag.__init__(self, "+" + name)
    self.key = self.raw
    self.name = name

  def sort_key(self):
    return (1, self.name, None)


class KeyValueTag(Tag):
  def __init__(self, key, value):
    Tag.__init__(self, key + ":" + value)
    self.key = key
    self.value = value

  def sort_key(self):
    return (2, self.key, self.value)


class Task:
  __task_re = re.compile(r"""
    ^
    ( x \s+ (?P<complete> [0-9]{4}-[0-9]{2}-[0-9]{2} ) \s+ )?
    ( (?P<priority> \( [A-Z_] \) ) \s+ )?
    ( (?P<create> [0-9]{4}-[0-9]{2}-[0-9]{2} ) \s+ )?
    (?P<title> .*? )
    $
  """, re.VERBOSE)

  @staticmethod
  def __parse_date(date_str):
    if date_str is None:
      return None
    try:
      return datetime.strptime(date_str, "%Y-%m-%d").date()
    except ValueError:
      return None

  @classmethod
  def load_all(cls, env, path, allow_comments = False):
    tasks = {}
    for i, line in enumerate(env.read_lines(path)):
      id = i + 1
      if line.startswith("#"):
        if allow_comments:
          continue
        else:
          log.error("Found task starting with '#' which could be confused with a comment.")
          sys.exit(1)
      line1 = line.rstrip("\r\n")
      if len(line1) > 0:
        tasks[id] = cls.parse(line1)
    return tasks

  @classmethod
  def save_all(cls, env, tasks, path, comments = []):
    lines = []

    if len(comments) > 0:
      for comment in comments:
        lines.append("# " + comment)
      lines.append("")

    max_id = max(tasks.keys()) if len(tasks) > 0 else 0
    for id in range(1, max_id + 1):
      if id in tasks:
        task = tasks[id]
        lines.append(task.line)
      elif env.preserve_line_numbers():
        lines.append("")

    env.write_lines(path, lines)

  @classmethod
  def sorted(cls, tasks, key = lambda task: task.line):
    return {i + 1: task for i, task in enumerate(sorted(tasks.values(), key = key))}

  @classmethod
  def parse(cls, line):
    m = cls.__task_re.match(line)
    assert m is not None, "__task_re should match all lines: %s" % line
    title = m.group("title")
    priority = Priority.parse(m.group("priority")) if m.group("priority") else Priority(None)
    create_date = cls.__parse_date(m.group("create"))
    complete_date = cls.__parse_date(m.group("complete"))
    task = cls(title, priority, create_date, complete_date)
    def remove_whitespace(s):
      "".join(s.split())
    assert remove_whitespace(task.line) == remove_whitespace(line), "parsing should not lose information other than whitespace: <%s> != <%s>" % (task.line, line)
    return task

  def __init__(self, title, priority, create_date, complete_date):
    self.title = title
    self.priority = priority
    self.create_date = create_date
    self.complete_date = complete_date
    self.line = "".join([
      "x %s " % complete_date.isoformat() if complete_date else "",
      priority.raw + (" " if len(priority.raw) > 0 else ""),
      "%s " % create_date.isoformat() if create_date else "",
      title
    ])
    # the rest is derived data
    self.tokens = Tag.tokenize(title)
    self.tags = { token for token in self.tokens if isinstance(token, Tag) }
    self.start_date = self.get_key_value_date("t")
    self.due_date = self.get_key_value_date("due")

  def __repr__(self):
    return self.line

  def __eq__(self, other):
    return other is not None and self.line.__eq__(other.line)

  def __ne__(self, other):
    return not self.__eq__(other)

  def __hash__(self):
    return self.line.__hash__()

  def is_hidden(self, date):
    return self.complete_date or (self.start_date and self.start_date > date)

  def normalize(self, date):
    task = self

    priority = task.priority if not task.complete_date else Priority(None)
    task = task.set_priority(priority.normalize(explicit_no_level = False))

    task = task.remove_duplicate_tags()

    if task.start_date and task.start_date <= date:
      task = task.set_start_date(None)

    # do this after all other tag operations, inc. setting start date (which is a tag)
    task = task.normalize_tag_order()

    return task

  def normalize_tag_order(self):
    tokens = self.tokens
    tokens = Tag.sort_edge_tags(tokens, trailing = False)
    tokens = Tag.sort_edge_tags(tokens, trailing = True)
    return Task(Tag.join_tokens(tokens), self.priority, self.create_date, self.complete_date)

  def remove_tags(self, tags):
    tokens = [token for token in self.tokens if token not in tags]
    return Task(Tag.join_tokens(tokens), self.priority, self.create_date, self.complete_date)

  def remove_duplicate_tags(self):
    tag_keys = set()
    tokens = []

    for token in self.tokens:
      if isinstance(token, Tag):
        if token.key not in tag_keys:
          tag_keys.add(token.key)
          tokens.append(token)
        else:
          log.warn("Discarding duplicate tag: %s" % token)
      else:
        tokens.append(token)

    return Task(Tag.join_tokens(tokens), self.priority, self.create_date, self.complete_date)

  def add_tags(self, tags, trailing = True):
    tag_keys = { tag.key for tag in tags }
    rem_tokens = [token for token in self.tokens if not isinstance(token, Tag) or token.key not in tag_keys]
    tokens = rem_tokens + list(tags) if trailing else list(tags) + rem_tokens
    return Task(Tag.join_tokens(tokens), self.priority, self.create_date, self.complete_date)

  def get_key_value_date(self, key):
    tag = self.get_key_value_tag(key)
    return self.__parse_date(tag.value) if tag else None

  def get_key_value_tag(self, key):
    # use self.tokens as it is a list, not a set, and thus will expose duplicates
    tags = [tag for tag in self.tokens if isinstance(tag, KeyValueTag) and tag.key == key]
    if len(tags) == 0:
      return None
    tag = tags.pop()
    if len(tags) > 0:
      log.warn("Ignoring duplicate tags: %s" % tags)
    return tag

  def pop_key_value_tag(self, key):
    # use self.tokens as it is a list, not a set, and thus will expose duplicates
    tags = [tag for tag in self.tokens if isinstance(tag, KeyValueTag) and tag.key == key]
    if len(tags) == 0:
      return None, self
    task = self.remove_tags(set(tags))
    tag = tags.pop()
    if len(tags) > 0:
      log.warn("Discarding duplicate tags: %s" % tags)
    return tag, task

  def set_priority(self, priority):
    return Task(self.title, priority, self.create_date, self.complete_date)

  def set_create_date(self, create_date):
    return Task(self.title, self.priority, create_date, self.complete_date)

  def set_start_date(self, start_date):
    _, task = self.pop_key_value_tag("t")
    if start_date:
      task = task.add_tags({KeyValueTag("t", start_date.isoformat())})
    return task


class TaskSlice:
  def __init__(self, env):
    self.env = env

  def comments(self):
    raise NotImplementedError

  def hidden(self, task):
    return task.is_hidden(self.env.today()) and not self.env.disable_filter()

  def matches(self, task):
    raise NotImplementedError

  def sort_key(self, task):
    return task.line

  def apply(self, task):
    raise NotImplementedError

  def unapply(self, sliced_task, original_task):
    raise NotImplementedError


class FutureTaskSlice(TaskSlice):
  def __init__(self, env):
    TaskSlice.__init__(self, env)

  def comments(self):
    return ["Future tasks"]

  def hidden(self, task):
    return task.complete_date and not self.env.disable_filter()

  def matches(self, task):
    return task.start_date and task.start_date > self.env.today()

  def sort_key(self, task):
    return task.start_date

  def apply(self, task):
    sliced_task = task
    sliced_task = sliced_task.set_create_date(None)
    return sliced_task

  def unapply(self, sliced_task, original_task):
    task = sliced_task
    task = task.set_create_date(original_task.create_date if original_task else self.env.default_create_date())
    return task


class ListTaskSlice(TaskSlice):
  def __init__(self, env, inc_terms, exc_terms):
    TaskSlice.__init__(self, env)
    self.inc_terms = inc_terms
    self.exc_terms = exc_terms

  def comments(self):
    if len(self.inc_terms) == 0 and len(self.exc_terms) == 0:
      comment = "All tasks"
    else:
      comment = "Tasks "
      if len(self.inc_terms) > 0:
        comment += "including terms: " + " ".join(self.inc_terms)
      if len(self.exc_terms) > 0:
        if len(self.inc_terms) > 0:
          comment += " and "
        comment += "excluding terms: " + " ".join(self.exc_terms)
    return [comment]

  def matches(self, task):
    for term in self.inc_terms:
      if not term in task.line:
        return False

    for term in self.exc_terms:
      if term in task.line:
        return False

    return True

  def apply(self, task):
    sliced_task = task
    sliced_task = sliced_task.set_create_date(None)
    return sliced_task

  def unapply(self, sliced_task, original_task):
    task = sliced_task
    task = task.set_create_date(original_task.create_date if original_task else self.env.default_create_date())
    return task


class MatchTaskSlice(TaskSlice):
  def __init__(self, env, priority = None, tags = set()):
    TaskSlice.__init__(self, env)
    self.priority = priority
    self.tags = tags

  def comments(self):
    if not self.priority and len(self.tags) == 0:
      comment = "All tasks"
    else:
      comment = "Tasks with "
      if self.priority:
        comment += "priority " + str(self.priority.normalize(explicit_no_level = True))
      if len(self.tags) > 0:
        if self.priority:
          comment += " and "
        comment += "tags: " + " ".join([str(tag) for tag in self.tags])
    return [comment]

  def matches(self, task):
    return (not self.priority or task.priority == self.priority) and task.tags >= self.tags

  def apply(self, task):
    sliced_task = task
    sliced_task = sliced_task.remove_tags(self.tags)
    sliced_task = sliced_task.set_priority(Priority(None) if self.priority else task.priority)
    sliced_task = sliced_task.set_create_date(None)
    return sliced_task

  def unapply(self, sliced_task, original_task):
    task = sliced_task
    task = task.set_create_date(original_task.create_date if original_task else self.env.default_create_date())
    if self.priority and not task.priority.level:
      task = task.set_priority(self.priority)
    task = task.add_tags(self.tags)
    return task


class ReviewTaskSlice(TaskSlice):
  def __init__(self, env, priority_to_interval):
    TaskSlice.__init__(self, env)
    self.priority_to_interval = priority_to_interval

  def comments(self):
    return ["Reviewable tasks (%s)" % self.env.slice_review_intervals()]

  def matches(self, task):
    if not task.create_date:
      return True

    if task.start_date and task.start_date <= self.env.today():
      return True

    age = self.env.today() - task.create_date
    # unconfigured priorities will never escape the review
    if task.priority in self.priority_to_interval:
      interval = self.priority_to_interval[task.priority]
      return age >= interval
    else:
      log.warn("Priority %s is not configured in TODOTXT_SLICE_REVIEW_INTERVALS. Ignoring task: %s" % (task.priority.normalize(explicit_no_level = True), task.line))
      return False

  def apply(self, task):
    sliced_task = task
    sliced_task = sliced_task.set_priority(Priority(None, True))
    sliced_task = sliced_task.set_create_date(None)
    return sliced_task

  def unapply(self, sliced_task, original_task):
    task = sliced_task

    if original_task and (task.priority.level or task.is_hidden(self.env.today())):
      # successful review; reset create_date to today if it's not completed already
      task = task.set_create_date(self.env.today() if not task.complete_date else original_task.create_date)
      task = task.set_priority(task.priority if task.priority.level else original_task.priority)
    else:
      # failed review; restore create_date and priority
      task = task.set_create_date(original_task.create_date if original_task else self.env.default_create_date())
      task = task.set_priority(original_task.priority if original_task else Priority(None))

    return task


class SliceEditor:
  def __init__(self, env, tasks, task_slice):
    self.env = env
    self.tasks = tasks
    self.task_slice = task_slice
    self.max_id = max(tasks.keys()) if len(tasks) > 0 else 0
    self.max_id_len = len(str(self.max_id))
    self.editable_tasks = self.__get_editable_tasks(tasks, task_slice, self.max_id_len)
    self.sorted_editable_tasks = Task.sorted(self.editable_tasks, key = self.task_slice.sort_key)
    self.recovered_editable_tasks = self.__recover_task_ids(self.editable_tasks)

  def __get_editable_tasks(self, tasks, task_slice, max_id_len):
    editable_tasks = {}
    for id, task in tasks.items():
      if not task_slice.hidden(task) and task_slice.matches(task):
        id_tag = KeyValueTag("i", str(id).zfill(max_id_len))
        editable_task = task_slice.apply(task)
        editable_task = editable_task.add_tags({id_tag}, trailing = False)
        editable_tasks[id] = editable_task
    return editable_tasks

  def __recover_task_ids(self, edited_tasks):
    recovered_edited_tasks = {}
    next_id = self.max_id + 1
    for task in edited_tasks.values():
      id = None
      id_tag, task = task.pop_key_value_tag("i")
      if id_tag:
        try:
          tmpid = int(id_tag.value)
          if tmpid in self.editable_tasks: # safety check
            id = tmpid
          else:
            log.warn("Ignoring unknown id: %s" % id_tag)
        except ValueError:
          log.warn("Ignoring invalid id: %s" % id_tag)
      if id is None:
        id = next_id
        next_id += 1
      recovered_edited_tasks[id] = task
    return recovered_edited_tasks

  def __merge_edited_tasks(self, edited_tasks):
    recovered_edited_tasks = self.__recover_task_ids(edited_tasks)
    merged_tasks = self.tasks.copy()

    for id in self.editable_tasks.keys() - recovered_edited_tasks.keys():
      existing_task = merged_tasks[id]
      self.env.print_diff(id, self.max_id_len, existing_task, None)
      del merged_tasks[id]

    for id, edited_task in recovered_edited_tasks.items():
      # don't write changes that are only due to normalization
      is_new = id not in self.recovered_editable_tasks
      is_edited = not is_new and edited_task != self.recovered_editable_tasks[id]
      if is_new or is_edited:
        existing_task = merged_tasks[id] if is_edited else None

        task = self.task_slice.unapply(edited_task, existing_task)

        # normalize tag order etc
        task = task.normalize(self.env.today())

        self.env.print_diff(id, self.max_id_len, existing_task, task)
        merged_tasks[id] = task

    return merged_tasks

  def __edit(self, tasks):
    # we want the file to be named todo.txt for compatibility with syntax-highlighting editors
    with self.env.create_temp_dir() as temp_dir_path:
      temp_todo_path = os.path.join(temp_dir_path, "todo.txt")
      Task.save_all(self.env, tasks, temp_todo_path, comments = self.task_slice.comments())
      self.env.subprocess_check_call(self.env.editor_path(), [temp_todo_path])
      return Task.load_all(self.env, temp_todo_path, allow_comments = True)

  def edit_and_merge(self):
    edited_tasks = self.__edit(self.sorted_editable_tasks)
    merged_tasks = self.__merge_edited_tasks(edited_tasks)
    return merged_tasks


def usage():
  # TODO: detect script name
  print("  slice <command> [<args>]")
  print("    Opens a 'slice' of your tasks in $EDITOR.")
  print("    The slice is automatically sorted, and completed/future tasks are hidden.")
  print("    After editing, changes to the slice will be merged back into todo.txt,")
  print("    and a colorized diff will be printed to the console.")
  print()
  print("    Note: In order to merge changes to the slice back into todo.txt, each task in the")
  print("          slice is 'tagged' with its line number. The first task is tagged with 'i:1',")
  print("          the second 'i:2', etc. Because this uses the standard key:value tag format, the")
  print("          slice is still a valid todo file, and editor plugins will continue to work.")
  print()
  print("    Note: The -t, -n and -x options of todo.sh are supported.")
  print("          These should be placed before 'slice'.")
  print()
  print("    future")
  print("      Opens tasks with a start date (t:<date>) in the future, sorted by start date.")
  print()
  print("    list [TERM...]")
  print("      Opens tasks including all TERM(s).")
  print("      TERM(s) preceded by a minus sign (i.e. -TERM) are excluded rather than included.")
  print("      If no TERM(s) are supplied, all tasks will be opened.")
  print()
  print("    match [PRIORITY] [TAG...]")
  print("      Opens tasks matching PRIORITY and/or TAG(s).")
  print("      If neither PRIORITY nor TAG(s) are supplied, all tasks will be opened.")
  print()
  print("      PRIORITY must be a letter, A-Z, or an underscore, indicating an unprioritized task.")
  print("      TAG(s) can be @contexts, +projects or custom key:value extensions.")
  print()
  print("      'match' differs from 'list' in that:")
  print("      - PRIORITY and TAG(s) will be hidden during editing")
  print("      - PRIORITY and TAG(s) will be automatically applied to all edited tasks")
  print("      - 'match' can only work with PRIORITY and TAG(s), whereas 'list' can match any text")
  print("      - 'match' can only perform positive matches, whereas 'list' can exclude terms")
  print()
  print("    review")
  print("      Opens tasks for review:")
  print("      - after they have reached a certain age (depends on the priority - see below)")
  print("      - when their start date (t:<date>) expires")
  print("      - if they don't have a creation date")
  print()
  print("      Reviews can be dismissed by setting a new priority, setting a start date in the")
  print("      future, or completing the task.")
  print()
  print("      After review the task will have its creation date reset to the current date.")
  print()
  print("      The review age for each priority is defined in TODOTXT_SLICE_REVIEW_INTERVALS,")
  print("      which should consist of <priority>:<interval> pairs separated by commas.")
  print("      An underscore can be used to define an interval for unprioritized tasks.")
  print()
  print("      For example, '_:0,A:1,B:7,C:56,Z:182' means:")
  print("      - unprioritized tasks should be reviewed immediately")
  print("      - 'A' tasks should be reviewed after 1 day")
  print("      - 'B' tasks should be reviewed after 7 days")
  print("      - 'C' tasks should be reviewed after 56 days")
  print("      - 'Z' tasks should be reviewed after 182 days")
  print()


def build_future_slice(env, args):
  return FutureTaskSlice(env)


def build_list_slice(env, args):
  inc_terms = []
  exc_terms = []

  for term in args:
    if term.startswith("-"):
      exc_terms.append(term[1:])
    else:
      inc_terms.append(term)

  return ListTaskSlice(env, inc_terms, exc_terms)


def build_match_slice(env, args):
  priority = None
  tags = set()
  argstr = " ".join(args)

  if len(args) > 0:
    priority_level = args[0]
    try:
      priority = Priority.parse("(%s)" % priority_level)
      args.pop(0)
    except ValueError:
      # try parsing as a tag instead
      pass

  while len(args) > 0:
    arg = args.pop()
    try:
      tag = Tag.parse(arg)
      tags.add(tag)
    except ValueError:
      log.warn("Error parsing args '%s': expected [PRIORITY] [TAG...]" % argstr)
      sys.exit(1)

  return MatchTaskSlice(env, priority, tags)


def build_review_slice(env, args):
  priority_to_interval = {}

  slice_review_intervals = env.slice_review_intervals()
  priority_interval_strs = slice_review_intervals.split(",") if len(slice_review_intervals) > 0 else []
  for priority_interval_str in priority_interval_strs:
    pair = priority_interval_str.split(":")
    if len(pair) != 2:
      log.warn("Error parsing %s='%s': expected <priority>:<interval> pairs separated by commas" % (key, value))
      sys.exit(1)

    [priority_level, interval_str] = pair

    try:
      priority = Priority.parse("(%s)" % priority_level)
    except ValueError:
      log.warn("Error parsing %s='%s': %s is not a priority" % (key, value, priority_level))
      sys.exit(1)

    try:
      interval = int(interval_str)
    except ValueError:
      log.warn("Error parsing %s='%s': %s is not an integer" % (key, value, interval_str))
      sys.exit(1)

    priority_to_interval[priority] = timedelta(days = interval)

  return ReviewTaskSlice(env, priority_to_interval)


def build_slice(env, name, args):
  slices = {
    "future": build_future_slice,
    "list": build_list_slice,
    "match": build_match_slice,
    "review": build_review_slice
  }

  if name not in slices:
    usage()
    sys.exit(1)

  return slices[name](env, args)


def main(env, args):
  if len(args) < 2:
    usage()
    sys.exit(1)

  action_name = args[1]
  action_args = args[2:]

  if action_name == "usage":
    usage()
    sys.exit(0)

  if len(action_args) < 1:
    usage()
    sys.exit(1)

  slice_name = action_args[0]
  slice_args = action_args[1:]

  tasks = Task.load_all(env, env.todo_file_path())

  task_slice = build_slice(env, slice_name, slice_args)
  editor = SliceEditor(env, tasks, task_slice)
  merged_tasks = editor.edit_and_merge()

  if merged_tasks != tasks:
    Task.save_all(env, merged_tasks, env.todo_file_path())


if __name__ == "__main__":
  h = logging.StreamHandler(sys.stderr)
  h.setLevel(logging.WARN)
  log.addHandler(h)
  main(TodoEnv(), sys.argv)

